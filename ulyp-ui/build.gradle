buildscript {
    repositories {
        flatDir {
            dirs 'ulyp-ui/fernflower.jar'
        }
    }
}

plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
    id 'org.jetbrains.kotlin.plugin.lombok' version '1.6.21'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.21'
    id 'io.freefair.lombok' version '8.12.2.1'
    id 'org.openjfx.javafxplugin' version '0.0.14' apply(false)
}

def javaVersion = JavaVersion.current()

if (javaVersion >= JavaVersion.VERSION_1_7 && javaVersion < JavaVersion.VERSION_1_9) {
    apply from: "build-jdk7.gradle"
} else if (javaVersion >= JavaVersion.VERSION_11) {
    apply from: "build-jdk11.gradle"
} else {
    throw new GradleException("JITWatch is unsupported on Java $javaVersion")
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation project(':ulyp-common')
    implementation project(':ulyp-storage')
    implementation files('libs/fernflower.jar')

    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-serialization-json', version: '1.4.1'

    implementation group: 'org.springframework', name: 'spring-beans', version: '5.2.8.RELEASE'
    implementation group: 'org.springframework', name: 'spring-context', version: '5.2.8.RELEASE'
    implementation group: 'org.springframework', name: 'spring-core', version: '5.2.8.RELEASE'

    implementation group: 'org.rocksdb', name: 'rocksdbjni', version: '9.7.3'
    implementation group: 'org.agrona', name: 'agrona', version: '1.4.0'

    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.28'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.28'

    implementation group: 'com.fifesoft', name: 'rsyntaxtextarea', version: '3.4.0'
    implementation group: 'com.github.javaparser', name: 'javaparser-core', version: '3.16.1'

    implementation group: 'org.apache.logging.log4j', name: 'log4j', version: '2.24.2'
    implementation group: 'org.jetbrains', name: 'annotations', version: '18.0.0'

    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

mainClassName = 'com.ulyp.ui.UIStarter'

sourceSets {
    main.java.srcDirs = ['src/main/java', '../src/main/java', 'src/main/kotlin', '../src/main/kotlin']
}

run {
    workingDir = rootDir
}

def platform = project.findProperty("platform")
def jarName
if (platform != null) {
    jarName = "ulyp-ui-${rootProject.version}-${platform}.jar"
} else {
    jarName = "ulyp-ui-${rootProject.version}.jar"
}

task fatJar(type: Jar) {
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Implementation-Title': "Ulyp UI",
                'Implementation-Version': rootProject.version,
                'Built-By': '0xaa4eb',
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version')
        )
    }
    filesMatching(['*.dll'], { fileCopyDetails ->
        if (platform != null && platform != "win") {
            fileCopyDetails.exclude()
        }
    })
    filesMatching(['*.so', '*.jnilib'], { fileCopyDetails ->
        def fileName = fileCopyDetails.name
        if (platform != null && fileName.startsWith("librocksdbjni")) {
            if (fileName.contains("librocksdbjni-linux32") && platform != "linux") {
                fileCopyDetails.exclude()
            }
            if (fileName.contains("librocksdbjni-linux64") && platform != "linux") {
                fileCopyDetails.exclude()
            }
            if (fileName.contains("librocksdbjni-linux-aarch64") && platform != "linux-aarch64") {
                fileCopyDetails.exclude()
            }
            if (fileName.contains("librocksdbjni-osx-x86_64") && platform != "mac") {
                fileCopyDetails.exclude()
            }
            if (fileName.contains("librocksdbjni-osx-arm64") && platform != "mac-aarch64") {
                fileCopyDetails.exclude()
            }
            // unsupported platforms
            if (fileName.contains("librocksdbjni-linux-s390x") || fileName.contains("librocksdbjni-linux-ppc64le")) {
                fileCopyDetails.exclude()
            }
        }
    })
    filesMatching(['librocksdbjni-linux-aarch64.*'], { fileCopyDetails ->
        if (platform != null && platform != "linux-aarch64") {
            fileCopyDetails.exclude()
        }
    })
    group = 'build'
    archiveFileName = jarName
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}